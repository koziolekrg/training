        -:    0:Source:/home/pako/Qt5.6.0/5.6/gcc_64/include/QtCore/qatomic_x86.h
        -:    0:Graph:/home/pako/Desktop/GitLab/library/media_player_qml_cmake/build/CMakeFiles/music_player.dir/main.cpp.gcno
        -:    0:Data:/home/pako/Desktop/GitLab/library/media_player_qml_cmake/build/CMakeFiles/music_player.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/****************************************************************************
        -:    2:**
        -:    3:** Copyright (C) 2015 The Qt Company Ltd.
        -:    4:** Copyright (C) 2011 Thiago Macieira <thiago@kde.org>
        -:    5:** Contact: http://www.qt.io/licensing/
        -:    6:**
        -:    7:** This file is part of the QtCore module of the Qt Toolkit.
        -:    8:**
        -:    9:** $QT_BEGIN_LICENSE:LGPL21$
        -:   10:** Commercial License Usage
        -:   11:** Licensees holding valid commercial Qt licenses may use this file in
        -:   12:** accordance with the commercial license agreement provided with the
        -:   13:** Software or, alternatively, in accordance with the terms contained in
        -:   14:** a written agreement between you and The Qt Company. For licensing terms
        -:   15:** and conditions see http://www.qt.io/terms-conditions. For further
        -:   16:** information use the contact form at http://www.qt.io/contact-us.
        -:   17:**
        -:   18:** GNU Lesser General Public License Usage
        -:   19:** Alternatively, this file may be used under the terms of the GNU Lesser
        -:   20:** General Public License version 2.1 or version 3 as published by the Free
        -:   21:** Software Foundation and appearing in the file LICENSE.LGPLv21 and
        -:   22:** LICENSE.LGPLv3 included in the packaging of this file. Please review the
        -:   23:** following information to ensure the GNU Lesser General Public License
        -:   24:** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
        -:   25:** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
        -:   26:**
        -:   27:** As a special exception, The Qt Company gives you certain additional
        -:   28:** rights. These rights are described in The Qt Company LGPL Exception
        -:   29:** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
        -:   30:**
        -:   31:** $QT_END_LICENSE$
        -:   32:**
        -:   33:****************************************************************************/
        -:   34:
        -:   35:#ifndef QATOMIC_X86_H
        -:   36:#define QATOMIC_X86_H
        -:   37:
        -:   38:#include <QtCore/qgenericatomic.h>
        -:   39:
        -:   40:QT_BEGIN_NAMESPACE
        -:   41:
        -:   42:#if 0
        -:   43:// silence syncqt warnings
        -:   44:QT_END_NAMESPACE
        -:   45:#pragma qt_sync_skip_header_check
        -:   46:#pragma qt_sync_stop_processing
        -:   47:#endif
        -:   48:
        -:   49:#define Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
        -:   50:#define Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
        -:   51:
        -:   52:#define Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:   53:#define Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
        -:   54:
        -:   55:#define Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:   56:#define Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
        -:   57:
        -:   58:#define Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:   59:#define Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE
        -:   60:
        -:   61:#define Q_ATOMIC_INT32_IS_SUPPORTED
        -:   62:
        -:   63:#define Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
        -:   64:#define Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_WAIT_FREE
        -:   65:
        -:   66:#define Q_ATOMIC_INT32_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:   67:#define Q_ATOMIC_INT32_TEST_AND_SET_IS_WAIT_FREE
        -:   68:
        -:   69:#define Q_ATOMIC_INT32_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:   70:#define Q_ATOMIC_INT32_FETCH_AND_STORE_IS_WAIT_FREE
        -:   71:
        -:   72:#define Q_ATOMIC_INT32_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:   73:#define Q_ATOMIC_INT32_FETCH_AND_ADD_IS_WAIT_FREE
        -:   74:
        -:   75:#define Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:   76:#define Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
        -:   77:
        -:   78:#define Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:   79:#define Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
        -:   80:
        -:   81:#define Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:   82:#define Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE
        -:   83:
        -:   84:template <int size> struct QBasicAtomicOps: QGenericAtomicOps<QBasicAtomicOps<size> >
        -:   85:{
        -:   86:    static inline Q_DECL_CONSTEXPR bool isReferenceCountingNative() Q_DECL_NOTHROW { return true; }
        -:   87:    static inline Q_DECL_CONSTEXPR bool isReferenceCountingWaitFree() Q_DECL_NOTHROW { return true; }
        -:   88:    template <typename T> static bool ref(T &_q_value) Q_DECL_NOTHROW;
        -:   89:    template <typename T> static bool deref(T &_q_value) Q_DECL_NOTHROW;
        -:   90:
        -:   91:    static inline Q_DECL_CONSTEXPR bool isTestAndSetNative() Q_DECL_NOTHROW { return true; }
        -:   92:    static inline Q_DECL_CONSTEXPR bool isTestAndSetWaitFree() Q_DECL_NOTHROW { return true; }
        -:   93:    template <typename T> static bool testAndSetRelaxed(T &_q_value, T expectedValue, T newValue) Q_DECL_NOTHROW;
        -:   94:    template <typename T> static bool
        -:   95:    testAndSetRelaxed(T &_q_value, T expectedValue, T newValue, T *currentValue) Q_DECL_NOTHROW;
        -:   96:
        -:   97:    static inline Q_DECL_CONSTEXPR bool isFetchAndStoreNative() Q_DECL_NOTHROW { return true; }
        -:   98:    static inline Q_DECL_CONSTEXPR bool isFetchAndStoreWaitFree() Q_DECL_NOTHROW { return true; }
        -:   99:    template <typename T> static T fetchAndStoreRelaxed(T &_q_value, T newValue) Q_DECL_NOTHROW;
        -:  100:
        -:  101:    static inline Q_DECL_CONSTEXPR bool isFetchAndAddNative() Q_DECL_NOTHROW { return true; }
        -:  102:    static inline Q_DECL_CONSTEXPR bool isFetchAndAddWaitFree() Q_DECL_NOTHROW { return true; }
        -:  103:    template <typename T> static
        -:  104:    T fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) Q_DECL_NOTHROW;
        -:  105:};
        -:  106:
        -:  107:template <typename T> struct QAtomicOps : QBasicAtomicOps<sizeof(T)>
        -:  108:{
        -:  109:    typedef T Type;
        -:  110:};
        -:  111:
        -:  112:#if defined(Q_CC_GNU)
        -:  113:
        -:  114:template<> struct QAtomicOpsSupport<1> { enum { IsSupported = 1 }; };
        -:  115:template<> struct QAtomicOpsSupport<2> { enum { IsSupported = 1 }; };
        -:  116:template<> struct QAtomicOpsSupport<8> { enum { IsSupported = 1 }; };
        -:  117:
        -:  118:/*
        -:  119: * Guide for the inline assembly below:
        -:  120: *
        -:  121: * x86 instructions are in the form "{opcode}{length} {source}, {destination}",
        -:  122: * where the length is one of the letters "b" (byte), "w" (word, 16-bit), "l"
        -:  123: * (dword, 32-bit), "q" (qword, 64-bit).
        -:  124: *
        -:  125: * In most cases, we can omit the length because it's inferred from one of the
        -:  126: * registers. For example, "xchg %0,%1" doesn't need the length suffix because
        -:  127: * we can only exchange data of the same size and one of the operands must be a
        -:  128: * register.
        -:  129: *
        -:  130: * The exception is the increment and decrement functions, where we add and
        -:  131: * subtract an immediate value (1). For those, we need to specify the length.
        -:  132: * GCC and ICC support the syntax "add%z0 $1, %0", where "%z0" expands to the
        -:  133: * length of the operand. Unfortunately, clang as of 3.0 doesn't support that.
        -:  134: * For that reason, the ref() and deref() functions are rolled out for all
        -:  135: * sizes.
        -:  136: *
        -:  137: * The functions are also rolled out for the 1-byte operations since those
        -:  138: * require a special register constraint "q" to force the compiler to schedule
        -:  139: * one of the 8-bit registers. It's probably a compiler bug that it tries to
        -:  140: * use a register that doesn't exist.
        -:  141: *
        -:  142: * Finally, 64-bit operations are supported via the cmpxchg8b instruction on
        -:  143: * 32-bit processors, via specialisation below.
        -:  144: */
        -:  145:
        -:  146:template<> template<typename T> inline
        -:  147:bool QBasicAtomicOps<1>::ref(T &_q_value) Q_DECL_NOTHROW
        -:  148:{
        -:  149:    unsigned char ret;
        -:  150:    asm volatile("lock\n"
        -:  151:                 "addb  $1, %0\n"
        -:  152:                 "setne %1"
        -:  153:                 : "=m" (_q_value), "=qm" (ret)
        -:  154:                 : "m" (_q_value)
        -:  155:                 : "memory");
        -:  156:    return ret != 0;
        -:  157:}
        -:  158:
        -:  159:template<> template<typename T> inline
        -:  160:bool QBasicAtomicOps<2>::ref(T &_q_value) Q_DECL_NOTHROW
        -:  161:{
        -:  162:    unsigned char ret;
        -:  163:    asm volatile("lock\n"
        -:  164:                 "incw %0\n"
        -:  165:                 "setne %1"
        -:  166:                 : "=m" (_q_value), "=qm" (ret)
        -:  167:                 : "m" (_q_value)
        -:  168:                 : "memory");
        -:  169:    return ret != 0;
        -:  170:}
        -:  171:
        -:  172:template<> template<typename T> inline
        -:  173:bool QBasicAtomicOps<4>::ref(T &_q_value) Q_DECL_NOTHROW
        -:  174:{
        -:  175:    unsigned char ret;
        -:  176:    asm volatile("lock\n"
        -:  177:                 "addl $1, %0\n"
        -:  178:                 "setne %1"
        -:  179:                 : "=m" (_q_value), "=qm" (ret)
        -:  180:                 : "m" (_q_value)
        -:  181:                 : "memory");
        -:  182:    return ret != 0;
        -:  183:}
        -:  184:
        -:  185:template<> template <typename T> inline
        -:  186:bool QBasicAtomicOps<1>::deref(T &_q_value) Q_DECL_NOTHROW
        -:  187:{
        -:  188:    unsigned char ret;
        -:  189:    asm volatile("lock\n"
        -:  190:                 "subb $1, %0\n"
        -:  191:                 "setne %1"
        -:  192:                 : "=m" (_q_value), "=qm" (ret)
        -:  193:                 : "m" (_q_value)
        -:  194:                 : "memory");
        -:  195:    return ret != 0;
        -:  196:}
        -:  197:
        -:  198:template<> template <typename T> inline
        -:  199:bool QBasicAtomicOps<2>::deref(T &_q_value) Q_DECL_NOTHROW
        -:  200:{
        -:  201:    unsigned char ret;
        -:  202:    asm volatile("lock\n"
        -:  203:                 "decw %0\n"
        -:  204:                 "setne %1"
        -:  205:                 : "=m" (_q_value), "=qm" (ret)
        -:  206:                 : "m" (_q_value)
        -:  207:                 : "memory");
        -:  208:    return ret != 0;
        -:  209:}
        -:  210:template<> template <typename T> inline
        4:  211:bool QBasicAtomicOps<4>::deref(T &_q_value) Q_DECL_NOTHROW
        -:  212:{
        -:  213:    unsigned char ret;
        -:  214:    asm volatile("lock\n"
        -:  215:                 "subl $1, %0\n"
        -:  216:                 "setne %1"
        -:  217:                 : "=m" (_q_value), "=qm" (ret)
        -:  218:                 : "m" (_q_value)
        4:  219:                 : "memory");
        4:  220:    return ret != 0;
        -:  221:}
        -:  222:
        -:  223:template<int size> template <typename T> inline
        -:  224:bool QBasicAtomicOps<size>::testAndSetRelaxed(T &_q_value, T expectedValue, T newValue) Q_DECL_NOTHROW
        -:  225:{
        -:  226:    unsigned char ret;
        -:  227:    asm volatile("lock\n"
        -:  228:                 "cmpxchg %3,%2\n"
        -:  229:                 "sete %1\n"
        -:  230:                 : "=a" (newValue), "=qm" (ret), "+m" (_q_value)
        -:  231:                 : "r" (newValue), "0" (expectedValue)
        -:  232:                 : "memory");
        -:  233:    return ret != 0;
        -:  234:}
        -:  235:
        -:  236:template<> template <typename T> inline
        -:  237:bool QBasicAtomicOps<1>::testAndSetRelaxed(T &_q_value, T expectedValue, T newValue) Q_DECL_NOTHROW
        -:  238:{
        -:  239:    unsigned char ret;
        -:  240:    asm volatile("lock\n"
        -:  241:                 "cmpxchg %3,%2\n"
        -:  242:                 "sete %1\n"
        -:  243:                 : "=a" (newValue), "=qm" (ret), "+m" (_q_value)
        -:  244:                 : "q" (newValue), "0" (expectedValue)
        -:  245:                 : "memory");
        -:  246:    return ret != 0;
        -:  247:}
        -:  248:
        -:  249:template<int size> template <typename T> inline
        -:  250:bool QBasicAtomicOps<size>::testAndSetRelaxed(T &_q_value, T expectedValue,
        -:  251:                                              T newValue, T *currentValue) Q_DECL_NOTHROW
        -:  252:{
        -:  253:    unsigned char ret;
        -:  254:    asm volatile("lock\n"
        -:  255:                 "cmpxchg %3,%2\n"
        -:  256:                 "sete %1\n"
        -:  257:                 : "=a" (newValue), "=qm" (ret), "+m" (_q_value)
        -:  258:                 : "r" (newValue), "0" (expectedValue)
        -:  259:                 : "memory");
        -:  260:    *currentValue = newValue;
        -:  261:    return ret != 0;
        -:  262:}
        -:  263:
        -:  264:template<> template <typename T> inline
        -:  265:bool QBasicAtomicOps<1>::testAndSetRelaxed(T &_q_value, T expectedValue,
        -:  266:                                           T newValue, T *currentValue) Q_DECL_NOTHROW
        -:  267:{
        -:  268:    unsigned char ret;
        -:  269:    asm volatile("lock\n"
        -:  270:                 "cmpxchg %3,%2\n"
        -:  271:                 "sete %1\n"
        -:  272:                 : "=a" (newValue), "=qm" (ret), "+m" (_q_value)
        -:  273:                 : "q" (newValue), "0" (expectedValue)
        -:  274:                 : "memory");
        -:  275:    *currentValue = newValue;
        -:  276:    return ret != 0;
        -:  277:}
        -:  278:
        -:  279:template<int size> template <typename T> inline
        -:  280:T QBasicAtomicOps<size>::fetchAndStoreRelaxed(T &_q_value, T newValue) Q_DECL_NOTHROW
        -:  281:{
        -:  282:    asm volatile("xchg %0,%1"
        -:  283:                 : "=r" (newValue), "+m" (_q_value)
        -:  284:                 : "0" (newValue)
        -:  285:                 : "memory");
        -:  286:    return newValue;
        -:  287:}
        -:  288:
        -:  289:template<> template <typename T> inline
        -:  290:T QBasicAtomicOps<1>::fetchAndStoreRelaxed(T &_q_value, T newValue) Q_DECL_NOTHROW
        -:  291:{
        -:  292:    asm volatile("xchg %0,%1"
        -:  293:                 : "=q" (newValue), "+m" (_q_value)
        -:  294:                 : "0" (newValue)
        -:  295:                 : "memory");
        -:  296:    return newValue;
        -:  297:}
        -:  298:
        -:  299:template<int size> template <typename T> inline
        -:  300:T QBasicAtomicOps<size>::fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) Q_DECL_NOTHROW
        -:  301:{
        -:  302:    T result;
        -:  303:    asm volatile("lock\n"
        -:  304:                 "xadd %0,%1"
        -:  305:                 : "=r" (result), "+m" (_q_value)
        -:  306:                 : "0" (T(valueToAdd * QAtomicAdditiveType<T>::AddScale))
        -:  307:                 : "memory");
        -:  308:    return result;
        -:  309:}
        -:  310:
        -:  311:template<> template <typename T> inline
        -:  312:T QBasicAtomicOps<1>::fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) Q_DECL_NOTHROW
        -:  313:{
        -:  314:    T result;
        -:  315:    asm volatile("lock\n"
        -:  316:                 "xadd %0,%1"
        -:  317:                 : "=q" (result), "+m" (_q_value)
        -:  318:                 : "0" (T(valueToAdd * QAtomicAdditiveType<T>::AddScale))
        -:  319:                 : "memory");
        -:  320:    return result;
        -:  321:}
        -:  322:
        -:  323:#define Q_ATOMIC_INT8_IS_SUPPORTED
        -:  324:
        -:  325:#define Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
        -:  326:#define Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_WAIT_FREE
        -:  327:
        -:  328:#define Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:  329:#define Q_ATOMIC_INT8_TEST_AND_SET_IS_WAIT_FREE
        -:  330:
        -:  331:#define Q_ATOMIC_INT8_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:  332:#define Q_ATOMIC_INT8_FETCH_AND_STORE_IS_WAIT_FREE
        -:  333:
        -:  334:#define Q_ATOMIC_INT8_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:  335:#define Q_ATOMIC_INT8_FETCH_AND_ADD_IS_WAIT_FREE
        -:  336:
        -:  337:#define Q_ATOMIC_INT16_IS_SUPPORTED
        -:  338:
        -:  339:#define Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
        -:  340:#define Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_WAIT_FREE
        -:  341:
        -:  342:#define Q_ATOMIC_INT16_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:  343:#define Q_ATOMIC_INT16_TEST_AND_SET_IS_WAIT_FREE
        -:  344:
        -:  345:#define Q_ATOMIC_INT16_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:  346:#define Q_ATOMIC_INT16_FETCH_AND_STORE_IS_WAIT_FREE
        -:  347:
        -:  348:#define Q_ATOMIC_INT16_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:  349:#define Q_ATOMIC_INT16_FETCH_AND_ADD_IS_WAIT_FREE
        -:  350:
        -:  351:#ifdef Q_PROCESSOR_X86_64
        -:  352:
        -:  353:#define Q_ATOMIC_INT64_IS_SUPPORTED
        -:  354:
        -:  355:#define Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
        -:  356:#define Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_WAIT_FREE
        -:  357:
        -:  358:#define Q_ATOMIC_INT64_TEST_AND_SET_IS_ALWAYS_NATIVE
        -:  359:#define Q_ATOMIC_INT64_TEST_AND_SET_IS_WAIT_FREE
        -:  360:
        -:  361:#define Q_ATOMIC_INT64_FETCH_AND_STORE_IS_ALWAYS_NATIVE
        -:  362:#define Q_ATOMIC_INT64_FETCH_AND_STORE_IS_WAIT_FREE
        -:  363:
        -:  364:#define Q_ATOMIC_INT64_FETCH_AND_ADD_IS_ALWAYS_NATIVE
        -:  365:#define Q_ATOMIC_INT64_FETCH_AND_ADD_IS_WAIT_FREE
        -:  366:
        -:  367:// native support for 64-bit types
        -:  368:template<> template<typename T> inline
        -:  369:bool QBasicAtomicOps<8>::ref(T &_q_value) Q_DECL_NOTHROW
        -:  370:{
        -:  371:    unsigned char ret;
        -:  372:    asm volatile("lock\n"
        -:  373:                 "addq $1, %0\n"
        -:  374:                 "setne %1"
        -:  375:                 : "=m" (_q_value), "=qm" (ret)
        -:  376:                 : "m" (_q_value)
        -:  377:                 : "memory");
        -:  378:    return ret != 0;
        -:  379:}
        -:  380:
        -:  381:template<> template <typename T> inline
        -:  382:bool QBasicAtomicOps<8>::deref(T &_q_value) Q_DECL_NOTHROW
        -:  383:{
        -:  384:    unsigned char ret;
        -:  385:    asm volatile("lock\n"
        -:  386:                 "subq $1, %0\n"
        -:  387:                 "setne %1"
        -:  388:                 : "=m" (_q_value), "=qm" (ret)
        -:  389:                 : "m" (_q_value)
        -:  390:                 : "memory");
        -:  391:    return ret != 0;
        -:  392:}
        -:  393:#else
        -:  394:// i386 architecture, emulate 64-bit support via cmpxchg8b
        -:  395:template <> struct QBasicAtomicOps<8>: QGenericAtomicOps<QBasicAtomicOps<8> >
        -:  396:{
        -:  397:    static inline Q_DECL_CONSTEXPR bool isTestAndSetNative() Q_DECL_NOTHROW { return true; }
        -:  398:    static inline Q_DECL_CONSTEXPR bool isTestAndSetWaitFree() Q_DECL_NOTHROW { return true; }
        -:  399:    template <typename T> static inline
        -:  400:    bool testAndSetRelaxed(T &_q_value, T expectedValue, T newValue) Q_DECL_NOTHROW
        -:  401:    {
        -:  402:#ifdef __PIC__
        -:  403:# define EBX_reg "r"
        -:  404:# define EBX_load(reg) "xchg " reg ", %%ebx\n"
        -:  405:#else
        -:  406:# define EBX_reg "b"
        -:  407:# define EBX_load(reg)
        -:  408:#endif
        -:  409:        quint32 highExpectedValue = quint32(newValue >> 32); // ECX
        -:  410:        asm volatile(EBX_load("%3")
        -:  411:                     "lock\n"
        -:  412:                     "cmpxchg8b %0\n"
        -:  413:                     EBX_load("%3")
        -:  414:                     "sete %%cl\n"
        -:  415:                     : "+m" (_q_value), "+c" (highExpectedValue), "+&A" (expectedValue)
        -:  416:                     : EBX_reg (quint32(newValue & 0xffffffff))
        -:  417:                     : "memory");
        -:  418:        // if the comparison failed, expectedValue here contains the current value
        -:  419:        return quint8(highExpectedValue) != 0;
        -:  420:#undef EBX_reg
        -:  421:#undef EBX_load
        -:  422:    }
        -:  423:};
        -:  424:#endif
        -:  425:
        -:  426:#else
        -:  427:#  error "This compiler for x86 is not supported"
        -:  428:#endif
        -:  429:
        -:  430:
        -:  431:QT_END_NAMESPACE
        -:  432:
        -:  433:#endif // QATOMIC_X86_H
